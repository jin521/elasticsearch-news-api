{"version":3,"sources":["Chart.js","Form.js","App.js","reportWebVitals.js","index.js"],"names":["Chart","BarChart","width","height","data","this","props","margin","top","right","left","bottom","CartesianGrid","strokeDasharray","XAxis","dataKey","label","value","offset","position","YAxis","angle","Tooltip","Legend","layout","align","verticalAlign","iconType","Bar","stackId","fill","Component","Form","setData","handleQueryChange","event","setState","query","target","handleBeforeChange","before","handleAfterChange","after","handleIntervalChange","interval","handleSubmit","preventDefault","state","before_millisec","Date","getTime","after_millisec","axios","get","then","res","onSubmit","type","onChange","App","useState","className","length","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a4817148.chunk.js","sourcesContent":["import \"./styles.css\";\nimport React, { Component } from \"react\";\nimport {\n  BarChart,\n  Bar,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  Legend\n} from \"recharts\";\n\nconst sampleData = [\n  {\n    name: \"2019-08-01\",\n    social: 4000,\n    print: 2400,\n    online: 2400,\n    tv: 1000,\n    radio: 5000\n  },\n  {\n    name: \"2019-08-05\",\n    social: 5000,\n    print: 200,\n    online: 200,\n    tv: 1600,\n    radio: 600\n  },\n  {\n    name: \"2019-08-09\",\n    social: 9000,\n    print: 1400,\n    online: 1400,\n    tv: 800,\n    radio: 200\n  },\n  {\n    name: \"2019-08-09\",\n    social: 1000,\n    print: 1900,\n    online: 2100,\n    tv: 800,\n    radio: 2000\n  },\n  {\n    name: \"2019-08-13\",\n    social: 4000,\n    print: 200,\n    online: 100,\n    tv: 900,\n    radio: 3000\n  },\n  {\n    name: \"2019-08-17\",\n    social: 200,\n    print: 2400,\n    online: 2300,\n    tv: 800,\n    radio: 1000\n  },\n  {\n    name: \"2019-08-21\",\n    social: 2400,\n    print: 2400,\n    online: 2200,\n    tv: 1100,\n    radio: 4500\n  }\n];\n\nexport class Chart extends Component {\n\n  render() {\n    return(\n      <BarChart\n      width={700}\n      height={500}\n      data={this.props.data}\n      margin={{\n        top: 20,\n        right: 30,\n        left: 20,\n        bottom: 5\n      }}\n    >\n      <CartesianGrid strokeDasharray=\"3 3\" />\n      <XAxis dataKey=\"name\" label={{ value: 'timestamp per day', offset: -2, position: 'insideBottom' }} />\n      <YAxis label={{ value: 'counts of records', offset: -10, angle: -90, position: 'insideLeft' }}/>\n      <Tooltip />\n      <Legend layout=\"vertical\" align=\"right\" verticalAlign= \"top\" iconType=\"circle\" />\n      <Bar dataKey=\"social\" stackId=\"a\" fill=\"#8884d8\" />\n      <Bar dataKey=\"print\" stackId=\"a\" fill=\"#82ca9d\" />\n      <Bar dataKey=\"online\" stackId=\"a\" fill=\"#ff6347\" />\n      <Bar dataKey=\"tv\" stackId=\"a\" fill=\"#cce435\" />\n      <Bar dataKey=\"radio\" stackId=\"a\" fill=\"#848eb4\" />\n    </BarChart>\n    )\n  }\n}\n\nexport default Chart\n","import React, { Component } from 'react';\nimport axios from 'axios';\nimport Chart from './Chart'\n\nexport class Form extends Component {\n  setData = this.props.setData;\n\n  constructor(props) {\n    super(props);\n    \n    this.state = {\n      query: 'scott morrison',\n      before: '2019-08-01',\n      after: '2019-08-31',\n      interval: '1'\n    }\n  }\n\n  handleQueryChange = (event) => {\n    this.setState({\n      query: event.target.value\n    }    \n    )\n  }\n\n  handleBeforeChange = (event) => {\n    this.setState({\n      before: event.target.value\n    }    \n    )\n  }\n\n  handleAfterChange = (event) => {\n    this.setState({\n      after: event.target.value\n    }    \n    )\n  }\n\n  handleIntervalChange = (event) => {\n    this.setState({\n      interval: event.target.value\n    }    \n    )\n  }\n\n  handleSubmit = (event) => {\n    event.preventDefault()\n    // alert(`${this.state.query} ${this.state.before} ${this.state.after} ${this.state.interval}`)\n    const { query, before, after, interval } = this.state\n\n    const before_millisec = new Date(before).getTime()\n    const after_millisec = new Date(after).getTime()\n\n    axios.get(`api/v1/news?chart=1&query=${query}&before=${before_millisec}&after=${after_millisec}&interval=${interval}`)\n    .then(res => {\n      // console.log(res.data);\n      this.setData(res.data)\n      // <Chart value={res.data} />\n    })\n    \n  }\n \n  render() {\n    const { query, before, after, interval } = this.state\n\n    return(\n      <form onSubmit={this.handleSubmit}>\n        <div>\n          <label>Search Term</label>\n          <input type= 'text' \n                 value={query} \n                 onChange={this.handleQueryChange}/>\n        </div>\n        <div>\n          <label>Before(milliseconds)</label>\n          <input type= 'date' \n                 value={before} \n                 onChange={this.handleBeforeChange}/>\n        </div>\n        <div>\n          <label>After(milliseconds)</label>\n          <input type= 'date' \n                 value={after} \n                 onChange={this.handleAfterChange}/>\n        </div>\n        <div>\n          <label>Interval(day)</label>\n          <input type= 'text' \n                 value={interval} \n                 onChange={this.handleIntervalChange}/>\n        </div>\n        <button type='submit'>Submit</button>\n      </form>\n    )\n  }\n}\n\nexport default Form","import React, { Component, useState } from 'react'\nimport './App.css';\nimport Form from './Form'\nimport Chart from './Chart'\n\nfunction App() {\n  const [data, setData] = useState([])\n\n  return (\n    <div className=\"App\">\n      <Form setData={setData}/>\n      { data.length ? <Chart data={data}/> : 'please enter'}\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}